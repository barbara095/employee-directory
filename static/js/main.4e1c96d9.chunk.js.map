{"version":3,"sources":["components/jumbotron/index.js","components/wrapper/index.js","components/search/index.js","components/employeeTable/index.js","components/container/index.js","components/col/index.js","utils/API.js","pages/directory.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Wrapper","props","Search","label","id","onChange","handleInputChange","value","search","name","type","placeholder","onClick","handleFormSubmit","class","aria-hidden","refreshPage","Table","firstName","lastName","email","age","phone","city","Container","fluid","Col","size","split","map","join","axios","get","Directory","state","employees","order","searchByName","filter","filteredName","employee","Object","values","toLocaleLowerCase","indexOf","toLowerCase","setState","sortFirstName","sorted","sort","a","b","sortLastName","event","target","preventDefault","window","location","reload","API","then","res","console","log","data","results","information","key","first","last","dob","catch","err","style","minHeight","this","object","Component","App","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4e1c96d9.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Jumbotron() {\n    return (\n    <div className=\"jumbotron jumbotron-fluid\">\n    <div className=\"container\">\n    <h1 className=\"display-4\">Welcome to your Employee Directory!</h1>\n    <p className=\"lead\">A place to store and manage information about your employees </p>\n  </div>\n</div>\n    )\n}\n\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Search(props) {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <label>Search</label>\n                <input label=\"search-bar\"\n                    id=\"search\"\n                    onChange={props.handleInputChange}\n                    value={props.search}\n                    name=\"search\"\n                    type=\"text\"\n                    placeholder=\"Search for employee\"\n                />\n                <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n                    <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\n                 </button>\n                 <br />\n                 <button type=\"submit\" onClick={props.refreshPage} className=\"btn btn-danger\">\n                 <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                 </button>\n                 \n            </div>\n        </form>\n    )\n};\n\nexport default Search;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Table(props) {\n    return (\n        <tr>\n            <td>{props.firstName}</td>\n            <td>{props.lastName}</td>\n            <td>{props.email}</td>\n            <td>{props.age}</td>\n            <td>{props.phone}</td>\n            <td>{props.city}</td>\n        </tr>\n    )\n};\n\nexport default Table;","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size\n    .split(\" \")\n    .map(size => \"col-\" + size)\n    .join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;","import axios from 'axios';\n\nconst BASEURL = 'https://randomuser.me/api/?results=75';\n\n// Export an object with a 'populateEmployees' method that searches the randomuser API for the passed query\nexport default {\n\tpopulateEmployees: function () {\n\t\treturn axios.get(BASEURL);\n\t},\n};","import React, { Component } from \"react\";\nimport Search from '../components/search/index';\nimport Table from '../components/employeeTable/index';\nimport Container from '../components/container/index';\nimport Col from '../components/col/index';\nimport API from '../utils/API';\nimport \"./style.css\";\n\nclass Directory extends Component {\n    // Setting the component's initial state\n    state = {\n        search: \"\",\n        employees: [],\n        order: \"ascending\"\n    };\n\n    componentDidMount() {\n        API.populateEmployees()\n            .then(res => {\n                console.log(res);\n                this.setState({\n                    employees: res.data.results.map((employee, information) => ({\n                        key: information,\n                        firstName: employee.name.first,\n                        lastName: employee.name.last,\n                        email: employee.email,\n                        phone: employee.phone,\n                        age: employee.dob.age,\n                        city: employee.location.city,\n                    })),\n                });\n            })\n            .catch((err) => console.log(err));\n    };\n\n    searchByName = (filter) => {\n        const filteredName = this.state.employees.filter((employee) => {\n            let values = Object.values(employee).join(\"\").toLocaleLowerCase();\n            return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n        this.setState({ employees: filteredName });\n    };\n\n    sortFirstName = () => {\n        if (this.state.order === \"ascending\") {\n            var sorted = this.state.employees.sort((a, b) =>\n                a.firstName > b.firstName ? 1 : -1)\n            this.setState({\n                employees: sorted,\n                order: \"descending\"\n            })\n        } else {\n            sorted = this.state.employees.sort((a, b) =>\n                a.firstName > b.firstName ? -1 : 1)\n            this.setState({\n                employees: sorted,\n                order: \"ascending\"\n            })\n        }\n    }\n\n    sortLastName = () => {\n        if (this.state.order === \"ascending\") {\n            var sorted = this.state.employees.sort((a, b) =>\n                a.lastName > b.lastName ? 1 : -1)\n            this.setState({\n                employees: sorted,\n                order: \"descending\"\n            })\n        } else {\n            sorted = this.state.employees.sort((a, b) =>\n                a.lastName > b.lastName ? -1 : 1)\n            this.setState({\n                employees: sorted,\n                order: \"ascending\"\n            })\n        }\n    }\n\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        const value = event.target.value;\n        const name = event.target.name;\n        // Updating the input's state\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleFormSubmit = event => {\n        // Preventing the default behavior of the form submit (which is to refresh the page)\n        event.preventDefault();\n        this.searchByName(this.state.search);\n    }\n\n    refreshPage = event => {\n        event.window.location.reload(false);\n    }\n\n    render() {\n        return (\n            <Container style={{ minHeight: \"100vh\" }}>\n\n                <Col size=\"md-12\" >\n                    <Search\n                        value={this.state.search}\n                        handleInputChange={this.handleInputChange}\n                        handleFormSubmit={this.handleFormSubmit}\n                        refreshPage={this.refreshPage}\n                    />\n                </Col>\n\n\n                <Col size=\"md-12\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th >First Name \n                                    <button type=\"submit\" class=\"sort-btn\" \n                                    onClick ={this.sortFirstName} \n                                    className=\"btn\">Sort \n                                    <i class=\"fa fa-sort-alpha-asc\" aria-hidden=\"true\"></i>\n                                    </button></th>\n                                <th>Last Name \n                                    <button type=\"submit\" class=\"sort-btn\" \n                                    onClick ={this.sortLastName} \n                                    className=\"btn\">Sort \n                                    <i class=\"fa fa-sort-alpha-asc\" aria-hidden=\"true\"></i>\n                                    </button></th>\n                                <th>Email</th>\n                                <th>Phone number</th>\n                                <th>Age</th>\n                                <th>City</th>\n                            </tr>\n                        </thead>\n                        {[...this.state.employees].map((object) => (\n                            <Table\n                                firstName={object.firstName}\n                                lastName={object.lastName}\n                                email={object.email}\n                                phone={object.phone}\n                                age={object.age}\n                                city={object.city}\n                                key={object.key}\n                            />\n                        ))}\n                    </table>\n                </Col>\n            </Container >\n        );\n    };\n};\n\nexport default Directory;","import React from 'react';\nimport './App.css';\nimport Jumbotron from './components/jumbotron';\nimport Wrapper from './components/wrapper';\nimport Directory from './pages/directory.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Jumbotron />\n       <Wrapper>\n        <Directory component={Directory}/>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}